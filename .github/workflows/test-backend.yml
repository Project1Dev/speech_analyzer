name: Test Backend

on:
  push:
    branches: [ master, main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/test-backend.yml'
  pull_request:
    branches: [ master, main ]
    paths:
      - 'backend/**'
  workflow_dispatch:

jobs:
  test:
    name: Test Backend (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: speech_analyzer_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio

      - name: Create .env file
        run: |
          cd backend
          cat > .env << EOF
          DATABASE_URL=postgresql://test_user:test_password@localhost:5432/speech_analyzer_test
          REDIS_URL=redis://localhost:6379
          SINGLE_USER_TOKEN=SINGLE_USER_DEV_TOKEN_12345
          ENVIRONMENT=test
          EOF

      - name: Run database migrations
        run: |
          cd backend
          alembic upgrade head || echo "Migration warning (may not be critical)"
        continue-on-error: true

      - name: Run linter (flake8)
        run: |
          cd backend
          pip install flake8
          flake8 app --count --select=E9,F63,F7,F82 --show-source --statistics || true
        continue-on-error: true

      - name: Run tests with pytest
        run: |
          cd backend
          pytest -v --cov=app --cov-report=xml --cov-report=html tests/ || true
        continue-on-error: true

      - name: Upload coverage reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-python-${{ matrix.python-version }}
          path: backend/htmlcov/
          retention-days: 7

      - name: Check app startup
        run: |
          cd backend
          python -c "
          import sys
          sys.path.insert(0, '.')
          try:
              from app.main import app
              print('✅ App imports successfully')
          except Exception as e:
              print(f'❌ App import failed: {e}')
              sys.exit(1)
          "

      - name: Test imports
        run: |
          cd backend
          python -c "
          from app.models import User, Recording, AnalysisResult
          from app.schemas import RecordingSchema, AnalysisSchema
          from app.services.analysis_engine import AnalysisEngine
          print('✅ All core imports successful')
          "
